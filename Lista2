Soluções da lista de exercícios 2.

1)
a)
O objetivo é encontrar o N-ésimo elemento da relação de recorrência F(0) = 1, F(1) = 1, F(N) = F(N-1) + F(N-2). Neste problema, não
há diferenças entre o melhor, o pior e o caso médio.
Existem múltiplas soluções para este problema. As mais triviais são a versão recursiva e a versão iterativa, que usa programação 
dinâmica. 
A versão recursiva simula a relação de recorrência, obtendo recursivamente F(N-1) e F(N-2), e então gerando F(N). Podemos calcular
sua complexidade de duas formas. 
A primeira delas é expandindo a relação de recorrência. Para podermos expandir a relação com mais facilidade, vamos transformá-la
em uma desigualdade, para gerar um upper bound. Subsequentemente, calcularemos um lower bound de forma similar.
T(N) = T(N-1) + T(N-2) + 1 <= T(N-1) + T(N-1) + 1
Logo, T(N) <= 2*T(N-1) + 1. 
Logo, podemos escrever T(N) sob a notação Big O da seguinte forma:
T(N) <= 2*T(N-1)
T(N-1) <= 2*(2T*(N-2) + 1) + 1 = (2^2)*T(N-2) + 2 + 1
T(K) <= (2^K)*T(N-K) + SOMATÓRIO(I=0, I<=K-1, (2^I))
Fazendo K = N, temos T(N) <= (2^N)*T(0) + SOMATÓRIO(I=0, I<=N-1, (2^I)) = SOMATÓRIO(I=0, I<=N, (2^I)) = 2^(N+1) - 1
Logo, T(N) <= O(2^N)
De forma similar, podemos escrever T(N) >= T(N-2) + T(N-2) + 1, que gera:
T(K) >= (2^K)*T(N-2*K) + SOMATÓRIO(I=0, I<=K-1, (2^I))
E fazendo K = N/2, temos:
T(N) >= (2^(N/2))*T(0) + SOMATÓRIO(I=0, I <= (N/2 - 1), (2^I)) = (2^(N/2)) + SOMATÓRIO(I=0, I <= (N/2 - 1), (2^I)) = SOMATÓRIO(I=0, I<=N/2, (2^I)) = 2^(N/2 + 1) - 1
T(N) >= O(2^(N/2))

Logo, nosso upper bound é O(2^N) e nosso lower bound é Ω(2^(N/2)), que é equivalente a Ω(2^N). Logo, nosso algoritmo é Θ(2^N) também.


A versão iterativa, por outro lado, computa a fórmula linearmente, executando uma única operação N vezes. Temos:
T(N) = 2 + SOMATÓRIO(I=3, I <= N; 1) = 2 + (N-2)*1 = N-2+2 = N
Logo, T(N) = O(N).


Um algoritmo mais eficiente reescreve a relação de recorrência sob a forma de uma matriz, declarando que:
F(N) = [1 1] * M^N, onde M = [0 1]
                             [1 1]

Utilizando esta fórmula, podemos calcular M^N usando exponenciação de matrizes. O custo de obter M * M com duas matrizes 2 X 2 é de 2^3 = 8, ou seja,
constante. Sendo assim, nossa fórmula de recorrência segue abaixo:
T(1) = 1
T(N) = T(N/2) + c

Expandindo, temos:
T(K) = T(N/(2^k)) + k*c
Fazendo K = log(N):
T(N) = T(N/2^(log(N))) + log(N)*c = T(N/N) + log(N)*c = 1 + log(N)*c
Logo:
T(N) = O(log(N))

Esta solução pode ser adaptada para resolver as mais diversas relações de recorrência lineares em tempo logarítmico.



b)





2)
a) 
Grafo: Qualquer estrutura que possa ser representada por vértices e arestas que ligam estes vértices.
Exemplo: Relações de amizade em uma rede social. Pessoas são vértices, relações de amizade são arestas.

b) 
Grafo conexo: Um grafo tal que, dados dois vértices (u,v), sempre exista um caminho para chegar a "v" a partir de "u".
Exemplo: Uma rede de computadores que segue o modelo cliente-servidor. Assumindo que a rede esteja bem estruturada, sempre é
possível enviar mensagens de um computador para o outro, utilizando o servidor como um intermediário. 

Grafo acíclico: Um grafo tal que, dado qualquer vértice "u", nunca exista um caminho para chegar em "u" a partir de "u".
Exemplo: Uma lista encadeada não-circular unidirecional. Um elemento apenas pode apontar para os elementos seguintes, ou seja,
nunca é possível voltar a um elemento anterior. Em outras palavras, não podemos voltar a "u" percorrendo a lista.

Grafo direcionado: Um grafo tal que, dados dois vértices (u,v), uma aresta ligando "u" a "v" não implique em uma aresta ligando 
"v" a "u".
Exemplo: Uma lista de dependências entre várias tarefas. Tarefas são vértices, dependências são arestas. O fato de uma tarefa "t1" 
depender de uma tarefa "t2" não significa que "t2" dependa de "t1".

c)
Adjacência entre dois vértices (u,v) em um grafo indica que existe uma aresta ligando "u" a "v" e uma ligando "v" a "u".
Exemplo: Dois amigos em uma rede social. A relação de amizade entre os dois amigos pode ser representada como uma aresta que os
liga, ou seja, os amigos são adjacentes. Se "u" é amigo de "v", "v" é amigo de "u".

Vizinhança, por outro lado, apenas indica que existe uma aresta ligando "u" a "v". Característica de grafos direcionados.
Exemplo: Interesses românticos. "u" pode estar apaixonado por "v", mas isso não implica que "v" se sinta da mesma forma a
respeito de "u". Logo, "u" é apenas vizinho de "v".

d)
Grafo planar: Um grafo que pode ser desenhado em um plano sem sobreposição de arestas. 
Exemplo: Um grafo que representa um tabuleiro de xadrez com um rei e várias peças adversárias que podem atacar este rei. Vértices
são as diferentes posições do tabuleiro que o rei pode ocupar, arestas são posições que o rei pode alcançar em um movimento a
partir da posição atual. Note que um rei não pode se mover para uma casa que está em perigo. Como o rei se move apenas uma casa por
vez, o grafo pode ser desenhado em um plano sem sobreposições.

e)
Não existe.

f) 
Grafo completo: Um grafo tal que todo elemento possua uma aresta que o liga a cada outro elemento do grafo.
Exemplo: Um videogame com um item chamado "mapa" que permite ao jogador acessar qualquer área do jogo a qualquer momento, a partir
de qualquer área. Ou seja, toda localização (Área) do jogo possui uma aresta (O próprio mapa) que a liga a qualquer outra área do 
jogo.

Clique: Um subconjunto de vértices em um grafo, tal que este subconjunto forme um grafo completo.
Exemplo: Um videogame com um item chamado "mapa" que permite ao jogador acessar algumas localizações do jogo, chamadas de
"áreas iniciais", a qualquer momento e a partir de qualquer área. Em outras palavras, é possível chegar a qualquer área
inicial a partir de qualquer área, incluindo as outras áreas iniciais. O conjunto de áreas iniciais forma um "clique".

Grafo bipartido: Um grafo bipartido é um grafo cujos vértices podem ser subdivididos em dois conjuntos C1 e C2, tais que toda aresta
conecte um elemento de C1 a um elemento de C2.
Exemplo: Um conjunto de telepatas, onde alguns telepatas podem apenas enviar mensagens telepáticas e outros podem apenas receber
mensagens. Podemos dividí-los nos conjuntos "Transmissor" e "Receptor", e toda aresta representando uma mensagem telepática entre
telepatas terá de ocorrer entre um Transmissor e um Receptor.

g)
Grafo simples: Um grafo tal que nenhum vértice "u" possua uma aresta que o ligue a si próprio, ou mais de uma aresta que o ligue
a outro vértice "v".
Exemplo: Relações de amizade em uma rede social. Não existem várias relações de amizade entre o mesmo par de pessoas, e nenhuma
pessoa pode se tornar amiga dela própria.

Multigrafo: Um grafo que pode possuir várias arestas que ligam um mesmo vértice "u" a um vértice "v" é um multigrafo.
Exemplo: Um grafo representando conexões entre aeroportos. Diversos vôos, fornecidos por diversas linhas em diversos horários, podem
ligar os mesmos dois aeroportos.

Digrafo: Um grafo direcionado, ou seja, dados dois vértices (u,v), a existência de uma aresta que ligue "u" a "v" não implica na
existência de uma aresta que ligue "v" a "u".
Exemplo: Dado um conjunto de elementos e vulnerabilidades que cada um desses elementos possui (Fogo é vulnerável a água, gelo é
vulnerável a fogo, mas fogo também é vulnerável a gelo), o grafo que representa os elementos como vértices e as relações de
vulnerabilidade como arestas é um dígrafo. Por exemplo, o fogo é vulnerável à água, mas a água não é vulnerável ao fogo.


3)
O grafo representado nos exemplos pode ser encontrado em ex3_sample.png


Matriz de incidência:
Dado um grafo com N vértices e E arestas, uma matriz de incidência é uma matriz N X E onde a posição (i,j) da matriz indica
se a aresta "j" liga o elemento "i" a algum outro. Como as colunas são arestas, cada coluna possui no máximo duas linhas marcadas
em si. A princípio é uma representação extremamente ineficiente. No exemplo abaixo, -1 representa origem e +1 representa destino.

Exemplo:
-1  0  0 +1  0  0  0
+1 -1 +1  0  0  0  0
 0 +1 -1 -1 +1  0  0
 0  0  0  0 -1  0  0
 0  0  0  0  0 +1 -1
 0  0  0  0  0 -1 +1



Matriz de adjacência:
Dado um grafo com N vértices, uma matriz de adjacência é uma matriz N X N que contém o valor "true" na posição (i,j) da matriz
se existir uma aresta que ligue o elemento "i" ao elemento "j", ou "false" caso contrário. Pode ser alterada para armazenar o
custo da aresta que liga "i" a "j". No exemplo, "true" é representado por 0 e "false" por 1.
Vantagens:
- Possível descobrir se existe uma aresta entre "i" e "j" em tempo constante. 
- Código mais simples e intuitivo, especialmente quando arestas com pesos diferentes estão envolvidas.

Desvantagens:
- Grande custo de espaço (N X N elementos, ou (N X N)/2 em um grafo não-dirigido).
- Obter todos os vizinhos de um nó "i" pode ser muito mais custoso do que o necessário, em grafos esparsos.

Exemplo:
0 0 1 0 0 0
1 0 1 0 0 0
0 1 0 1 0 0
0 0 0 0 0 0
0 0 0 0 0 1
0 0 0 0 1 0


Lista de adjacência:
Dado um grafo com N vértices, uma lista de adjacência é um vetor de listas encadeadas (Que podem ser implementadas como um vector,
para simplificar), onde cada elemento "j" da lista de posição "i" indica que há uma aresta que ligue o elemento "i" ao elemento "j".
Vantagens:
- Custo de armazenamento se reduz a O(E), onde E é o número de arestas no grafo. Invariavelmente menor ou igual ao custo de armazenar
uma matriz de adjacência.
- Obter todos os vizinhos de um nó "i" é uma operação eficiente, sem percorrer elementos desnecessários.

Desvantagens:
- Descobrir se existe uma aresta entre "i" e "j" pode ser tão custoso quanto obter todos os vizinhos de "i".
- Código pode se tornar relativamente complexo.

Exemplo:
1
2
0 1
2
5
4



4)



5)
a) 
Enumeração explícita é uma técnica que busca testar todas as soluções possíveis para um problema, e dentre elas escolhe a melhor.
Um exemplo de aplicação é resolver o problema do Caixeiro-Viajante, onde precisamos gerar o melhor caminho que visite todos os
vértices de um grafo uma única vez, e volte para o vértice de origem. Podemos gerar todas as permutações de vértices possíveis,
onde cada permutação é um caminho, e verificar qual delas gera a melhor solução.

Enumeração implícita geralmente é associada à técnica de Branch-and-Bound, onde iniciamos com uma solução qualquer e então buscamos
melhorar esta solução gerando todas as soluções que valham a pena explorar utilizando enumeração explícita. Uma solução que não vale 
a pena enumerar é uma função que não tem qualquer chance de gerar uma solução ótima, comparada com a solução ótima que temos no momento.
Um exemplo seria, novamente, resolver o problema do Caixeiro-Viajante, porém sem visitar qualquer solução que inclua um caminho (Não
necessariamente contendo todos os elementos) de custo superior à nossa solução ótima.


b) 
Programação dinâmica é um paradigma que busca armazenar os resultados de operações que são feitas muitas vezes, de forma que elas só
precisem ser executadas uma única vez. Pode ser aplicado em funções simples, como calcular Fib(N) em O(N), onde Fib(N) é o elemento
da sequência de Fibonacci na posição N, ou em aplicações complexas, como obter o menor múltiplo de um valor K que possua alguns
algarismos pré-definidos (Ou declarar que tal múltiplo não existe).
Um exemplo de aplicação fácil de explicar é o caso do Subset Sum, onde armazenamos os valores que podem ser obtidos utilizando os
elementos de 1 a i, até que i chegue a N. A complexidade, em geral, é o número de estados de nossa DP multiplicado pelo custo de
realizar uma transição de um estado para o outro.


c)
Algoritmos gulosos/gananciosos seguem um paradigma que, ao invés de procurar uma solução ótima global, focam em encontrar uma solução
ótima local, e esperam que esta seja ótima globalmente também. Algumas vezes eles sucedem, outras vezes não. Um exemplo de problema
que pode ser resolvido com algoritmos gulosos é, dado um conjunto C, encontrar um subconjunto de tamanho K tal que o AND bitwise entre
todos os elementos do conjunto seja maximizado.
Para resolver este problema, simplesmente iteramos bit a bit e verificamos se existe algum conjunto de tamanho K que nos permite manter
esse bit. Caso exista, reduzimos nosso conjunto aos elementos que possuem esse bit e prosseguimos. Naturalmente, começamos gulosamente
pelo bit mais significativo, terminando no menor bit. A melhor solução local para o subconjunto que possui o maior bit possível setado 
também será a melhor solução global, pois qualquer solução que não possua esse bit gerará um AND menor.


d)
Backtracking é uma técnica de força bruta que busca gerar todas as soluções possíveis assim como a enumeração explícita, porém excluindo
imediatamente soluções de alguma forma inválidas. É similar ao branch-and-bound, porém apenas elimina soluções inválidas, não soluções
inferiores à ótima. O problema Strings Binárias Triple-Free, de autoria de Rujia Liu, pode e deve ser resolvido por backtracking, pois
existem muitas soluções inválidas que seriam visitadas se enumerássemos todas as 2^30 soluções possíveis para o pior caso. A descrição
do problema pode ser encontrada em ex5_d_sample.png, disponível no mesmo repositório que este arquivo de texto.



7)
Código-fonte disponível em "ex7.cpp". Para compilar, simplesmente execute o comando:
g++ ex7.cpp
Seguido do comando:
./a.out
Para abrir o executável resultante. Alternativamente, utilizar uma IDE como o Dev C++ também é possível.
A entrada deve descrever um grafo e uma única consulta. O formato de entrada é descrito abaixo:
V E
S1 D1 C1
S2 D2 C2
...
SE DE CE
SQ DQ

Onde V é o número de vértices, E é o número de arestas, e cada trio de inteiros nas linhas subsequentes representa uma aresta do grafo,
onde Si é o vértice de origem da aresta, Di é o vértice de destino e Ci é o custo para se usar a aresta. Por fim, SQ e DQ representam
a consulta desejada: A saída do programa será o caminho mais curto de SQ a DQ, além do custo deste caminho, ou "caminho inexistente"
caso não exista um caminho entre SQ e DQ.
Restrições:
- O número de vértices não pode ser maior que 10.
- Nenhum subconjunto de arestas deve possuir uma soma maior ou igual a 10^9 - 1.
Um exemplo de entrada e saída para o algoritmo seguem abaixo:

Entrada:
3 5
1 3 5
1 2 1
2 3 3
3 1 4
2 1 0
1 3

Saída:
Custo: 4
Caminho: 3 <- 2 <- 1

Entrada:
3 4
1 3 5
1 2 1
2 3 3
2 1 4
3 1

Saída:
Caminho inexistente


8)
a) Dada uma fórmula booleana, o problema SAT consiste em determinar se existe uma atribuição às variáveis desta fórmula que
tornem o resultado da fórmula "true". Note que as variáveis podem apenas receber "true" ou "false". A teoria da NP-completude
é explicada em b), onde descrevemos as classes NP, NP-difícil e finalmente NP-Completa.


b)
Classe P: Problemas que podem ser resolvidos em tempo polinomial, ou seja, da forma O(n^k), onde k é uma constante. Um exemplo
é o problema de buscar um elemento em um vetor não-ordenado, o que pode ser feito em O(n^1).

Classe NP: Problemas cujas soluções são verificáveis em tempo polinomial, mas que não necessariamente são resolvidos também em
tempo polinomial de forma determinística. Como a classe P está contida em NP, podemos usar o mesmo exemplo de buscar um elemento
em um vetor não-ordenado. A complexidade ainda é O(N), polinomial. Além disso, podemos verificar a corretude da nossa solução
também em tempo polinomial (O(N^0) = O(1), ou O(N^1) = O(N), dependendo da nossa implementação). Logo, o problema também é NP.

Classe NP-Difícil: Engloba os problemas PB tais que todo problema em NP possa ser reduzido a PB em tempo polinomial. Alguns deles
nem sequer são decidíveis. Um exemplo é o problema da parada, onde é dada a descrição de um programa, e uma entrada para este
programa, e deve-se decidir se o programa vai parar ou não para esta entrada.

Classe NP-Completa: Engloba os problemas que estão em NP e que são NP-Difíceis ao mesmo tempo. Um exemplo é o problema do Subset
Sum, onde é dada a descrição de um conjunto de valores e devemos descobrir se existe algum subconjunto deste conjunto cuja soma 
resulte em um valor específico.
